// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: pkg/proto/restaurants.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestaurantManagementServiceClient is the client API for RestaurantManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantManagementServiceClient interface {
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	GetMenuItemInMenu(ctx context.Context, in *GetMenuItemInMenuRequest, opts ...grpc.CallOption) (*MenuItem, error)
	GetMenuItemsInOrder(ctx context.Context, in *GetMenuItemsInOrderRequest, opts ...grpc.CallOption) (*Menu, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Order, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*UpdateMenuItemResponse, error)
	RemoveMenuItem(ctx context.Context, in *RemoveMenuItemRequest, opts ...grpc.CallOption) (*RemoveMenuItemResponse, error)
	ChangeMenuItemAvailability(ctx context.Context, in *MenuItemAvailabilityRequest, opts ...grpc.CallOption) (*UpdateMenuItemResponse, error)
	AddMenuItemInMenu(ctx context.Context, in *MenuItem, opts ...grpc.CallOption) (*Menu, error)
	RemoveMenuItemInMenu(ctx context.Context, in *RemoveMenuItemRequest, opts ...grpc.CallOption) (*Menu, error)
}

type restaurantManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantManagementServiceClient(cc grpc.ClientConnInterface) RestaurantManagementServiceClient {
	return &restaurantManagementServiceClient{cc}
}

func (c *restaurantManagementServiceClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/CreateMenuItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetMenuItemInMenu(ctx context.Context, in *GetMenuItemInMenuRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetMenuItemInMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetMenuItemsInOrder(ctx context.Context, in *GetMenuItemsInOrderRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetMenuItemsInOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*UpdateMenuItemResponse, error) {
	out := new(UpdateMenuItemResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UpdateMenuItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) RemoveMenuItem(ctx context.Context, in *RemoveMenuItemRequest, opts ...grpc.CallOption) (*RemoveMenuItemResponse, error) {
	out := new(RemoveMenuItemResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/RemoveMenuItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) ChangeMenuItemAvailability(ctx context.Context, in *MenuItemAvailabilityRequest, opts ...grpc.CallOption) (*UpdateMenuItemResponse, error) {
	out := new(UpdateMenuItemResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/ChangeMenuItemAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) AddMenuItemInMenu(ctx context.Context, in *MenuItem, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/AddMenuItemInMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) RemoveMenuItemInMenu(ctx context.Context, in *RemoveMenuItemRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/RemoveMenuItemInMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantManagementServiceServer is the server API for RestaurantManagementService service.
// All implementations must embed UnimplementedRestaurantManagementServiceServer
// for forward compatibility
type RestaurantManagementServiceServer interface {
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error)
	GetMenuItemInMenu(context.Context, *GetMenuItemInMenuRequest) (*MenuItem, error)
	GetMenuItemsInOrder(context.Context, *GetMenuItemsInOrderRequest) (*Menu, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*Order, error)
	GetOrder(context.Context, *Empty) (*Order, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*UpdateMenuItemResponse, error)
	RemoveMenuItem(context.Context, *RemoveMenuItemRequest) (*RemoveMenuItemResponse, error)
	ChangeMenuItemAvailability(context.Context, *MenuItemAvailabilityRequest) (*UpdateMenuItemResponse, error)
	AddMenuItemInMenu(context.Context, *MenuItem) (*Menu, error)
	RemoveMenuItemInMenu(context.Context, *RemoveMenuItemRequest) (*Menu, error)
	mustEmbedUnimplementedRestaurantManagementServiceServer()
}

// UnimplementedRestaurantManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestaurantManagementServiceServer struct {
}

func (UnimplementedRestaurantManagementServiceServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetMenuItemInMenu(context.Context, *GetMenuItemInMenuRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemInMenu not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetMenuItemsInOrder(context.Context, *GetMenuItemsInOrderRequest) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemsInOrder not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetOrder(context.Context, *Empty) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*UpdateMenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) RemoveMenuItem(context.Context, *RemoveMenuItemRequest) (*RemoveMenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMenuItem not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) ChangeMenuItemAvailability(context.Context, *MenuItemAvailabilityRequest) (*UpdateMenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMenuItemAvailability not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) AddMenuItemInMenu(context.Context, *MenuItem) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenuItemInMenu not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) RemoveMenuItemInMenu(context.Context, *RemoveMenuItemRequest) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMenuItemInMenu not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) mustEmbedUnimplementedRestaurantManagementServiceServer() {
}

// UnsafeRestaurantManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantManagementServiceServer will
// result in compilation errors.
type UnsafeRestaurantManagementServiceServer interface {
	mustEmbedUnimplementedRestaurantManagementServiceServer()
}

func RegisterRestaurantManagementServiceServer(s grpc.ServiceRegistrar, srv RestaurantManagementServiceServer) {
	s.RegisterService(&RestaurantManagementService_ServiceDesc, srv)
}

func _RestaurantManagementService_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/CreateMenuItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetMenuItemInMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemInMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetMenuItemInMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetMenuItemInMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetMenuItemInMenu(ctx, req.(*GetMenuItemInMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetMenuItemsInOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemsInOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetMenuItemsInOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetMenuItemsInOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetMenuItemsInOrder(ctx, req.(*GetMenuItemsInOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetOrder(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UpdateMenuItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_RemoveMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).RemoveMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/RemoveMenuItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).RemoveMenuItem(ctx, req.(*RemoveMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_ChangeMenuItemAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuItemAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).ChangeMenuItemAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/ChangeMenuItemAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).ChangeMenuItemAvailability(ctx, req.(*MenuItemAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_AddMenuItemInMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).AddMenuItemInMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/AddMenuItemInMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).AddMenuItemInMenu(ctx, req.(*MenuItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_RemoveMenuItemInMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).RemoveMenuItemInMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/RemoveMenuItemInMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).RemoveMenuItemInMenu(ctx, req.(*RemoveMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantManagementService_ServiceDesc is the grpc.ServiceDesc for RestaurantManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantManagementService",
	HandlerType: (*RestaurantManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenuItem",
			Handler:    _RestaurantManagementService_CreateMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItemInMenu",
			Handler:    _RestaurantManagementService_GetMenuItemInMenu_Handler,
		},
		{
			MethodName: "GetMenuItemsInOrder",
			Handler:    _RestaurantManagementService_GetMenuItemsInOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _RestaurantManagementService_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _RestaurantManagementService_UpdateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _RestaurantManagementService_GetOrder_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _RestaurantManagementService_UpdateMenuItem_Handler,
		},
		{
			MethodName: "RemoveMenuItem",
			Handler:    _RestaurantManagementService_RemoveMenuItem_Handler,
		},
		{
			MethodName: "ChangeMenuItemAvailability",
			Handler:    _RestaurantManagementService_ChangeMenuItemAvailability_Handler,
		},
		{
			MethodName: "AddMenuItemInMenu",
			Handler:    _RestaurantManagementService_AddMenuItemInMenu_Handler,
		},
		{
			MethodName: "RemoveMenuItemInMenu",
			Handler:    _RestaurantManagementService_RemoveMenuItemInMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/restaurants.proto",
}
