// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: internal/protos/restaurants.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestaurantManagementServiceClient is the client API for RestaurantManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantManagementServiceClient interface {
	AddDish(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*Dish, error)
	UpdateDish(ctx context.Context, in *UpdateDishRequest, opts ...grpc.CallOption) (*UpdateDishResponse, error)
	DeleteDish(ctx context.Context, in *DeleteDishRequest, opts ...grpc.CallOption) (*DeleteDishResponse, error)
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*Menu, error)
	GetDishDetails(ctx context.Context, in *GetDishDetailsRequest, opts ...grpc.CallOption) (*Dish, error)
	UpdateDishIngredients(ctx context.Context, in *UpdateDishIngredientsRequest, opts ...grpc.CallOption) (*UpdateDishResponse, error)
	GetDishCategories(ctx context.Context, in *GetDishDetailsRequest, opts ...grpc.CallOption) (*GetDishCategoriesResponse, error)
	ToggleDishAvailability(ctx context.Context, in *ToggleDishAvailabilityRequest, opts ...grpc.CallOption) (*ToggleDishAvailabilityResponse, error)
	UploadDishImages(ctx context.Context, in *UploadDishImagesRequest, opts ...grpc.CallOption) (*UploadDishImagesResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
}

type restaurantManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantManagementServiceClient(cc grpc.ClientConnInterface) RestaurantManagementServiceClient {
	return &restaurantManagementServiceClient{cc}
}

func (c *restaurantManagementServiceClient) AddDish(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*Dish, error) {
	out := new(Dish)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/AddDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UpdateDish(ctx context.Context, in *UpdateDishRequest, opts ...grpc.CallOption) (*UpdateDishResponse, error) {
	out := new(UpdateDishResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UpdateDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) DeleteDish(ctx context.Context, in *DeleteDishRequest, opts ...grpc.CallOption) (*DeleteDishResponse, error) {
	out := new(DeleteDishResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/DeleteDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetDishDetails(ctx context.Context, in *GetDishDetailsRequest, opts ...grpc.CallOption) (*Dish, error) {
	out := new(Dish)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetDishDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UpdateDishIngredients(ctx context.Context, in *UpdateDishIngredientsRequest, opts ...grpc.CallOption) (*UpdateDishResponse, error) {
	out := new(UpdateDishResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UpdateDishIngredients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetDishCategories(ctx context.Context, in *GetDishDetailsRequest, opts ...grpc.CallOption) (*GetDishCategoriesResponse, error) {
	out := new(GetDishCategoriesResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetDishCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) ToggleDishAvailability(ctx context.Context, in *ToggleDishAvailabilityRequest, opts ...grpc.CallOption) (*ToggleDishAvailabilityResponse, error) {
	out := new(ToggleDishAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/ToggleDishAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UploadDishImages(ctx context.Context, in *UploadDishImagesRequest, opts ...grpc.CallOption) (*UploadDishImagesResponse, error) {
	out := new(UploadDishImagesResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UploadDishImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantManagementServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantManagementService/UpdateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantManagementServiceServer is the server API for RestaurantManagementService service.
// All implementations must embed UnimplementedRestaurantManagementServiceServer
// for forward compatibility
type RestaurantManagementServiceServer interface {
	AddDish(context.Context, *CreateMenuItemRequest) (*Dish, error)
	UpdateDish(context.Context, *UpdateDishRequest) (*UpdateDishResponse, error)
	DeleteDish(context.Context, *DeleteDishRequest) (*DeleteDishResponse, error)
	GetMenu(context.Context, *GetMenuRequest) (*Menu, error)
	GetDishDetails(context.Context, *GetDishDetailsRequest) (*Dish, error)
	UpdateDishIngredients(context.Context, *UpdateDishIngredientsRequest) (*UpdateDishResponse, error)
	GetDishCategories(context.Context, *GetDishDetailsRequest) (*GetDishCategoriesResponse, error)
	ToggleDishAvailability(context.Context, *ToggleDishAvailabilityRequest) (*ToggleDishAvailabilityResponse, error)
	UploadDishImages(context.Context, *UploadDishImagesRequest) (*UploadDishImagesResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	mustEmbedUnimplementedRestaurantManagementServiceServer()
}

// UnimplementedRestaurantManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestaurantManagementServiceServer struct {
}

func (UnimplementedRestaurantManagementServiceServer) AddDish(context.Context, *CreateMenuItemRequest) (*Dish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDish not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UpdateDish(context.Context, *UpdateDishRequest) (*UpdateDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDish not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) DeleteDish(context.Context, *DeleteDishRequest) (*DeleteDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDish not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetMenu(context.Context, *GetMenuRequest) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetDishDetails(context.Context, *GetDishDetailsRequest) (*Dish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishDetails not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UpdateDishIngredients(context.Context, *UpdateDishIngredientsRequest) (*UpdateDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDishIngredients not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetDishCategories(context.Context, *GetDishDetailsRequest) (*GetDishCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishCategories not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) ToggleDishAvailability(context.Context, *ToggleDishAvailabilityRequest) (*ToggleDishAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleDishAvailability not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UploadDishImages(context.Context, *UploadDishImagesRequest) (*UploadDishImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDishImages not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedRestaurantManagementServiceServer) mustEmbedUnimplementedRestaurantManagementServiceServer() {
}

// UnsafeRestaurantManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantManagementServiceServer will
// result in compilation errors.
type UnsafeRestaurantManagementServiceServer interface {
	mustEmbedUnimplementedRestaurantManagementServiceServer()
}

func RegisterRestaurantManagementServiceServer(s grpc.ServiceRegistrar, srv RestaurantManagementServiceServer) {
	s.RegisterService(&RestaurantManagementService_ServiceDesc, srv)
}

func _RestaurantManagementService_AddDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).AddDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/AddDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).AddDish(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UpdateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UpdateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UpdateDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UpdateDish(ctx, req.(*UpdateDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_DeleteDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).DeleteDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/DeleteDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).DeleteDish(ctx, req.(*DeleteDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetDishDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetDishDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetDishDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetDishDetails(ctx, req.(*GetDishDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UpdateDishIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDishIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UpdateDishIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UpdateDishIngredients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UpdateDishIngredients(ctx, req.(*UpdateDishIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetDishCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetDishCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetDishCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetDishCategories(ctx, req.(*GetDishDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_ToggleDishAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleDishAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).ToggleDishAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/ToggleDishAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).ToggleDishAvailability(ctx, req.(*ToggleDishAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UploadDishImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDishImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UploadDishImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UploadDishImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UploadDishImages(ctx, req.(*UploadDishImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantManagementService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantManagementServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantManagementService/UpdateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantManagementServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantManagementService_ServiceDesc is the grpc.ServiceDesc for RestaurantManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantManagementService",
	HandlerType: (*RestaurantManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDish",
			Handler:    _RestaurantManagementService_AddDish_Handler,
		},
		{
			MethodName: "UpdateDish",
			Handler:    _RestaurantManagementService_UpdateDish_Handler,
		},
		{
			MethodName: "DeleteDish",
			Handler:    _RestaurantManagementService_DeleteDish_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _RestaurantManagementService_GetMenu_Handler,
		},
		{
			MethodName: "GetDishDetails",
			Handler:    _RestaurantManagementService_GetDishDetails_Handler,
		},
		{
			MethodName: "UpdateDishIngredients",
			Handler:    _RestaurantManagementService_UpdateDishIngredients_Handler,
		},
		{
			MethodName: "GetDishCategories",
			Handler:    _RestaurantManagementService_GetDishCategories_Handler,
		},
		{
			MethodName: "ToggleDishAvailability",
			Handler:    _RestaurantManagementService_ToggleDishAvailability_Handler,
		},
		{
			MethodName: "UploadDishImages",
			Handler:    _RestaurantManagementService_UploadDishImages_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _RestaurantManagementService_GetOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _RestaurantManagementService_UpdateOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/restaurants.proto",
}
